@page "/managerlogin"

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>Manager Login Page</h2>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username (Email):</label>
        <InputText @bind-Value="@loginModel.Username" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="@loginModel.Password" Type="password" />
    </div>

    <button type="submit">Login</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="color:red">@errorMessage</div>
    }
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {

            var response = await Http.PostAsJsonAsync("https://localhost:5070/api/auth/managerlogin", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                await LocalStorage.SetItemAsync("authToken", result.Token);


                if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuthStateProvider)
                {

                    await customAuthStateProvider.MarkUserAsAuthenticated(result.Token);
                }
                else
                {
                    errorMessage = "Error: Authentication provider is not the expected type.";
                }

                Navigation.NavigateTo("/managerpage");
                Console.WriteLine("Navigated away from login page.");




            }
            else
            {
                errorMessage = "Invalid credentials. Please try again.";
                Console.WriteLine("Invalid credentials. Please try again.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
